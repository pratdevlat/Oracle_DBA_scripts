# PostgreSQL Installation Guide - RHEL 8 & Windows

## Table of Contents

1. [RHEL 8 Installation](#rhel-8-installation)
- [Online Installation](#rhel-8-online-installation)
- [Offline Installation](#rhel-8-offline-installation)
1. [Windows Installation](#windows-installation)
- [Online Installation](#windows-online-installation)
- [Offline Installation](#windows-offline-installation)
1. [Post-Installation Configuration](#post-installation-configuration)
1. [Verification and Testing](#verification-and-testing)

-----

## RHEL 8 Installation

### Prerequisites

- RHEL 8 system with root or sudo access
- Minimum 1GB RAM (2GB+ recommended)
- At least 512MB free disk space for basic installation
- Internet connection (for online installation)

### RHEL 8 Online Installation

#### Method 1: Using PostgreSQL Official Repository (Recommended)

**Step 1: Install PostgreSQL Repository**

```bash
# Install the repository configuration package
sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

# Update package cache
sudo dnf update -y
```

**Step 2: Disable Built-in PostgreSQL Module**

```bash
# RHEL 8 includes an older PostgreSQL module that conflicts
sudo dnf -qy module disable postgresql
```

**Step 3: Install PostgreSQL Server and Client**

```bash
# Install PostgreSQL 16 (latest stable version)
sudo dnf install -y postgresql16-server postgresql16

# Install additional useful packages
sudo dnf install -y postgresql16-contrib postgresql16-devel
```

**Step 4: Initialize Database**

```bash
# Initialize the database cluster
sudo /usr/pgsql-16/bin/postgresql-16-setup initdb

# Enable and start PostgreSQL service
sudo systemctl enable postgresql-16
sudo systemctl start postgresql-16
```

#### Method 2: Using AppStream Repository

**Step 1: Install from AppStream**

```bash
# List available PostgreSQL versions
sudo dnf module list postgresql

# Install PostgreSQL (usually version 13 or 15)
sudo dnf module install -y postgresql:15/server

# Install additional packages
sudo dnf install -y postgresql-contrib postgresql-devel
```

**Step 2: Initialize and Start Service**

```bash
# Initialize database
sudo postgresql-setup --initdb

# Enable and start service
sudo systemctl enable postgresql
sudo systemctl start postgresql
```

### RHEL 8 Offline Installation

#### Preparation on Connected System

**Step 1: Download Required Packages**

```bash
# Create download directory
mkdir -p ~/postgresql-offline
cd ~/postgresql-offline

# Download PostgreSQL packages and dependencies
sudo dnf download --resolve --alldeps postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel

# Alternative: Create a local repository
sudo dnf install -y createrepo
createrepo .
```

**Step 2: Create Installation Bundle**

```bash
# Create installation script
cat > install-postgresql.sh << 'EOF'
#!/bin/bash
echo "Installing PostgreSQL offline..."

# Install all RPM packages
sudo rpm -Uvh *.rpm --nodeps --force

# Initialize database
sudo /usr/pgsql-16/bin/postgresql-16-setup initdb

# Enable and start service
sudo systemctl enable postgresql-16
sudo systemctl start postgresql-16

echo "PostgreSQL installation completed!"
EOF

chmod +x install-postgresql.sh

# Create tarball
tar -czf postgresql-offline-install.tar.gz *.rpm install-postgresql.sh
```

#### Installation on Offline System

**Step 1: Transfer and Extract**

```bash
# Transfer the tarball to offline system
# Extract files
tar -xzf postgresql-offline-install.tar.gz
cd postgresql-offline-install
```

**Step 2: Install Dependencies First**

```bash
# Install system dependencies that might be missing
sudo rpm -Uvh --nodeps --force \
  glibc-*.rpm \
  libicu-*.rpm \
  openssl-libs-*.rpm \
  zlib-*.rpm \
  readline-*.rpm
```

**Step 3: Install PostgreSQL**

```bash
# Run installation script
./install-postgresql.sh

# Or install manually
sudo rpm -Uvh postgresql16-*.rpm --nodeps
sudo /usr/pgsql-16/bin/postgresql-16-setup initdb
sudo systemctl enable postgresql-16
sudo systemctl start postgresql-16
```

-----

## Windows Installation

### Prerequisites

- Windows 10/11 or Windows Server 2016+
- Administrator privileges
- Minimum 1GB RAM (2GB+ recommended)
- 512MB+ free disk space

### Windows Online Installation

#### Method 1: Official PostgreSQL Installer (Recommended)

**Step 1: Download Installer**

1. Visit https://www.postgresql.org/download/windows/
1. Click “Download the installer” (EDB installer)
1. Select your PostgreSQL version (16.x recommended)
1. Choose Windows x86-64 architecture

**Step 2: Run Installation**

1. Right-click installer → “Run as administrator”
1. Follow installation wizard:
- **Installation Directory**: Default `C:\Program Files\PostgreSQL\16`
- **Data Directory**: Default `C:\Program Files\PostgreSQL\16\data`
- **Password**: Set strong password for ‘postgres’ user
- **Port**: Default 5432 (change if needed)
- **Locale**: Default locale (usually English)

**Step 3: Component Selection**
Select components to install:

- **PostgreSQL Server** (required)
- **pgAdmin 4** (web-based administration tool)
- **Stack Builder** (for additional tools)
- **Command Line Tools** (psql, etc.)

**Step 4: Complete Installation**

- Installation typically takes 5-10 minutes
- Uncheck “Launch Stack Builder” unless you need additional tools
- Click “Finish”

#### Method 2: Using Chocolatey Package Manager

**Step 1: Install Chocolatey** (if not already installed)

```powershell
# Run as Administrator
Set-ExecutionPolicy Bypass -Scope Process -Force
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
```

**Step 2: Install PostgreSQL**

```powershell
# Install PostgreSQL
choco install postgresql16 --params '/Password:YourStrongPassword'

# Install pgAdmin separately if needed
choco install pgadmin4
```

### Windows Offline Installation

#### Preparation on Connected System

**Step 1: Download Complete Installer**

1. Download PostgreSQL installer from official site
1. Download Visual C++ Redistributable (dependency)
1. Download .NET Framework 4.8+ (if not already installed)

**Step 2: Create Installation Package**
Create folder structure:

```
postgresql-offline/
├── postgresql-16.1-1-windows-x64.exe
├── VC_redist.x64.exe
├── ndp48-web.exe
└── install-postgresql.bat
```

**Step 3: Create Installation Script**

```batch
@echo off
echo Installing PostgreSQL offline...

REM Install Visual C++ Redistributable
echo Installing Visual C++ Redistributable...
VC_redist.x64.exe /quiet /norestart

REM Install .NET Framework (if needed)
echo Installing .NET Framework...
ndp48-web.exe /quiet /norestart

REM Install PostgreSQL
echo Installing PostgreSQL...
postgresql-16.1-1-windows-x64.exe --mode unattended --unattendedmodeui minimal --disable-components stackbuilder --superpassword "YourPassword" --servicename "postgresql-16" --serviceport 5432

echo Installation completed!
pause
```

#### Installation on Offline System

**Step 1: Transfer Files**
Copy the entire `postgresql-offline` folder to target system

**Step 2: Run Installation**

1. Right-click `install-postgresql.bat` → “Run as administrator”
1. Wait for installation to complete
1. Verify installation by checking Services

-----

## Post-Installation Configuration

### RHEL 8 Configuration

**Step 1: Configure PostgreSQL User**

```bash
# Switch to postgres user
sudo -i -u postgres

# Set password for postgres user
psql -c "ALTER USER postgres PASSWORD 'your_strong_password';"

# Exit postgres user
exit
```

**Step 2: Configure Authentication**

```bash
# Edit pg_hba.conf
sudo nano /var/lib/pgsql/16/data/pg_hba.conf

# Change authentication method (example)
# local   all             all                                     peer
# to:
# local   all             all                                     md5

# Edit postgresql.conf for network access
sudo nano /var/lib/pgsql/16/data/postgresql.conf

# Uncomment and modify:
listen_addresses = '*'          # Allow all connections
port = 5432                    # Default port
```

**Step 3: Configure Firewall**

```bash
# Open PostgreSQL port
sudo firewall-cmd --permanent --add-port=5432/tcp
sudo firewall-cmd --reload

# Restart PostgreSQL
sudo systemctl restart postgresql-16
```

### Windows Configuration

**Step 1: Verify Service**

```powershell
# Check PostgreSQL service status
Get-Service postgresql-*

# Start service if not running
Start-Service postgresql-x64-16
```

**Step 2: Configure Windows Firewall**

```powershell
# Allow PostgreSQL through firewall
New-NetFirewallRule -DisplayName "PostgreSQL" -Direction Inbound -Protocol TCP -LocalPort 5432 -Action Allow
```

**Step 3: Environment Variables**
Add PostgreSQL to PATH:

1. System Properties → Environment Variables
1. Add to PATH: `C:\Program Files\PostgreSQL\16\bin`

-----

## Verification and Testing

### Basic Connection Test

**RHEL 8:**

```bash
# Test local connection
sudo -u postgres psql

# Test with password
psql -h localhost -U postgres -d postgres

# Check version
psql -c "SELECT version();"
```

**Windows:**

```cmd
# Open Command Prompt
psql -U postgres -h localhost

# Check version
psql -U postgres -c "SELECT version();"
```

### Create Test Database

```sql
-- Connect to PostgreSQL
psql -U postgres

-- Create test database
CREATE DATABASE testdb;

-- Create test user
CREATE USER testuser WITH PASSWORD 'testpass';

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;

-- Test connection with new user
\c testdb testuser

-- Create test table
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert test data
INSERT INTO test_table (name) VALUES ('Test Record');

-- Query test data
SELECT * FROM test_table;
```

### Performance Test

```sql
-- Create larger test table
CREATE TABLE performance_test AS
SELECT 
    generate_series(1, 100000) as id,
    md5(random()::text) as data,
    current_timestamp as created_at;

-- Test query performance
EXPLAIN ANALYZE SELECT * FROM performance_test WHERE id < 1000;
```

## Troubleshooting Common Issues

### RHEL 8 Issues

**Service Won’t Start:**

```bash
# Check logs
sudo journalctl -u postgresql-16 -f

# Check PostgreSQL logs
sudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log

# Verify data directory permissions
sudo ls -la /var/lib/pgsql/16/data/
```

**Connection Refused:**

```bash
# Check if service is running
sudo systemctl status postgresql-16

# Check port binding
sudo netstat -tlnp | grep 5432

# Verify authentication settings
sudo cat /var/lib/pgsql/16/data/pg_hba.conf
```

### Windows Issues

**Service Issues:**

```powershell
# Check Windows Event Logs
Get-EventLog -LogName System -Source PostgreSQL

# Verify service account
Get-Service postgresql-* | Select Name, Status, StartType
```

**Connection Issues:**

```cmd
# Test local connection
psql -U postgres -h 127.0.0.1

# Check port availability
netstat -an | findstr 5432
```

This comprehensive guide covers both online and offline installation scenarios for PostgreSQL on RHEL 8 and Windows systems, including all necessary dependencies and configuration steps.